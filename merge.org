hh#+TITLE: Merge

* Merge Primitive

Merge is defined as a function that given two lists a, b returns
another list c such that:


a, b --merge--> c iff (a[i] < b[j]) ^ (c[p] = a[i]) ^ (c[q] = b[j]) ==> (c[q] < c[q])


If the lists a and b are sorted, then the list c that results from
merging a and b is also sorted.

** Merge Function

=merge a b= takes two lists returns the merged list.  =merge= is a
recursive function that works as follows:

- base case :: If any of the lists =a= or =b= is empty.  In this case
               the result of =merge a b= should be the non-empty list
               of the two.  If both are empty then we return the empty
               list.

- inductive case :: If both the lists are non-empty, we perform merge
                    on the =tail= of both the lists and append the
                    result to =[x]=, where x is defines as:


=x = if (head a) < (head b) then (head a) else (head b)=

#+NAME: merge
#+BEGIN_SRC elm
merge : List Int -> List Int -> List Int
merge a b = 
    case (a, b) of
        ([], []) -> []
        ([], hb::tb) -> hb::tb
        (ha::ta, []) -> ha::ta
        (ha::ta, hb::tb) -> 
            (if (ha < hb) then 
                ha :: (merge ta <| hb::tb)
             else hb :: (merge (ha::ta) tb))
#+END_SRC


* Transition system 1: Merge Two Adjacent Sublists (M1)

In this system we merge two sublists in a given list of numbers.


* Tangle

#+BEGIN_SRC elm :noweb yes :tangle src/LMerge.elm
module LMerge exposing (merge)

<<merge>>
#+END_SRC
